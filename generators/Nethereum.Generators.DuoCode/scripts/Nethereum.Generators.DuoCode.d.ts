/*!
* Type definitions for Nethereum.Generators.DuoCode, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
*
* Generated by DuoCode Compiler 3.0.1654.0 [Professional]
*/

/// <reference path="./mscorlib.d.ts" />

declare module Nethereum {
    module Generators {
        // Nethereum.Generators.ContractProjectGenerator
        export interface ContractProjectGenerator extends System.Object {
            get_ContractABI(): Model.ContractABI;
            get_ContractName(): string;
            get_ByteCode(): string;
            get_BaseNamespace(): string;
            get_ServiceNamespace(): string;
            get_CQSNamespace(): string;
            get_DTONamespace(): string;
            get_BaseOutputPath(): string;
            get_PathDelimiter(): string;
            get_CodeGenLanguage(): Core.CodeGenLanguage;
            GenerateAllMessagesFileAndService(): Core.GeneratedFile[];
            GenerateAllMessages(): Core.GeneratedFile;
            GenerateAll(): Core.GeneratedFile[];
            GenerateService(singleMessagesFile?: boolean): Core.GeneratedFile;
            GenerateAllUnity(): Core.GeneratedFile[];
            GenerateUnityContractFactory(singleMessagesFile?: boolean): Core.GeneratedFile;
            GenerateUnityFunctionRequests(singleMessagesFile?: boolean): Core.GeneratedFile;
            GenerateAllCQSMessages(): System.Collections.Generic.List$1<Core.GeneratedFile>;
            GenerateAllFunctionDTOs(): System.Collections.Generic.List$1<Core.GeneratedFile>;
            GenerateAllStructs(): System.Collections.Generic.List$1<Core.GeneratedFile>;
            GetAllStructTypeGenerators(): System.Collections.Generic.List$1<DTOs.StructTypeGenerator>;
            GetAllFunctionDTOsGenerators(): System.Collections.Generic.List$1<DTOs.FunctionOutputDTOGenerator>;
            GenerateAllEventDTOs(): System.Collections.Generic.List$1<Core.GeneratedFile>;
            GenerateAllErrorDTOs(): System.Collections.Generic.List$1<Core.GeneratedFile>;
            GetllEventDTOGenerators(): System.Collections.Generic.List$1<DTOs.EventDTOGenerator>;
            GetAllErrorDTOGenerators(): System.Collections.Generic.List$1<DTOs.ErrorDTOGenerator>;
            GeneratCQSFunctionMessages(): System.Collections.Generic.List$1<Core.GeneratedFile>;
            GetAllCQSFunctionMessageGenerators(): System.Collections.Generic.List$1<CQS.FunctionCQSMessageGenerator>;
            get_AddRootNamespaceOnVbProjectsToImportStatements(): boolean;
            set_AddRootNamespaceOnVbProjectsToImportStatements(value: boolean): void;
            GetCQSMessageDeploymentGenerator(): CQS.ContractDeploymentCQSMessageGenerator;
            GeneratCQSMessageDeployment(): Core.GeneratedFile;
            GetFullNamespace(namespace: string): string;
            GetFullPath(namespace: string): string;
        }
        export interface ContractProjectGeneratorTypeFunc extends TypeFunction {
            (): ContractProjectGeneratorTypeFunc;
            prototype: ContractProjectGenerator;
            new (contractABI: Model.ContractABI, contractName: string, byteCode: string, baseNamespace: string, serviceNamespace: string, cqsNamespace: string, dtoNamespace: string, baseOutputPath: string, pathDelimiter: string, codeGenLanguage: Core.CodeGenLanguage): ContractProjectGenerator;
            ctor: { new (contractABI: Model.ContractABI, contractName: string, byteCode: string, baseNamespace: string, serviceNamespace: string, cqsNamespace: string, dtoNamespace: string, baseOutputPath: string, pathDelimiter: string, codeGenLanguage: Core.CodeGenLanguage): ContractProjectGenerator; };
        }
        const ContractProjectGenerator: ContractProjectGeneratorTypeFunc;

        // Nethereum.Generators.NetStandardLibraryGenerator
        export interface NetStandardLibraryGenerator extends System.Object {
            get_ProjectFileName(): string;
            get_CodeGenLanguage(): Core.CodeGenLanguage;
            GenerateFileContent(outputPath: string): Core.GeneratedFile;
            get_NethereumWeb3Version(): string;
            set_NethereumWeb3Version(value: string): void;
        }
        export interface NetStandardLibraryGeneratorTypeFunc extends TypeFunction {
            (): NetStandardLibraryGeneratorTypeFunc;
            prototype: NetStandardLibraryGenerator;
            new (projectFileName: string, codeGenLanguage: Core.CodeGenLanguage): NetStandardLibraryGenerator;
            ctor: { new (projectFileName: string, codeGenLanguage: Core.CodeGenLanguage): NetStandardLibraryGenerator; };
        }
        const NetStandardLibraryGenerator: NetStandardLibraryGeneratorTypeFunc;
        module Core {
            // Nethereum.Generators.Core.FunctionABIModel
            export interface FunctionABIModel extends System.Object {
                get_FunctionABI(): Model.FunctionABI;
                get_CodeGenLanguage(): CodeGenLanguage;
                GetSingleOutputReturnType(): string;
                GetSingleAbiReturnType(): string;
                IsMultipleOutput(): boolean;
                IsSingleOutput(): boolean;
                HasNoInputParameters(): boolean;
                HasNoReturn(): boolean;
                IsTransaction(): boolean;
            }
            export interface FunctionABIModelTypeFunc extends TypeFunction {
                (): FunctionABIModelTypeFunc;
                prototype: FunctionABIModel;
                new (functionABI: Model.FunctionABI, abiTypeToDotnetTypeConvertor: ITypeConvertor, codeGenLanguage: CodeGenLanguage): FunctionABIModel;
                ctor: { new (functionABI: Model.FunctionABI, abiTypeToDotnetTypeConvertor: ITypeConvertor, codeGenLanguage: CodeGenLanguage): FunctionABIModel; };
            }
            const FunctionABIModel: FunctionABIModelTypeFunc;

            // Nethereum.Generators.Core.ParameterABIModel
            export interface ParameterABIModel extends ParameterModel$1<Model.ParameterABI> {
                GetPropertyName$1(parameterDirection: ParameterDirection): string;
                GetVariableName$1(name: string, order: int): string;
                GetPropertyName$2(name: string, order: int, parameterDirection?: ParameterDirection): string;
                GetStructTypeClassName(): string;
            }
            export interface ParameterABIModelTypeFunc extends TypeFunction {
                (): ParameterABIModelTypeFunc;
                prototype: ParameterABIModel;
                AnonymousInputParameterPrefix: string;
                AnonymousOutputParameterPrefix: string;
                ctor$1: { new (parameter: Model.ParameterABI, codeGenLanguage: CodeGenLanguage): ParameterABIModel; };
                new (codeGenLanguage: CodeGenLanguage): ParameterABIModel;
                ctor: { new (codeGenLanguage: CodeGenLanguage): ParameterABIModel; };
            }
            const ParameterABIModel: ParameterABIModelTypeFunc;

            // Nethereum.Generators.Core.ParameterABIModelTypeMap
            export interface ParameterABIModelTypeMap extends System.Object {
                get_CodeGenLanguage(): CodeGenLanguage;
                GetParameterDotNetOutputMapType(parameter: Model.ParameterABI): string;
                GetParameterDotNetInputMapType(parameter: Model.ParameterABI): string;
            }
            export interface ParameterABIModelTypeMapTypeFunc extends TypeFunction {
                (): ParameterABIModelTypeMapTypeFunc;
                prototype: ParameterABIModelTypeMap;
                new (typeConvertor: ITypeConvertor, codeGenLanguage: CodeGenLanguage): ParameterABIModelTypeMap;
                ctor: { new (typeConvertor: ITypeConvertor, codeGenLanguage: CodeGenLanguage): ParameterABIModelTypeMap; };
            }
            const ParameterABIModelTypeMap: ParameterABIModelTypeMapTypeFunc;

            // Nethereum.Generators.Core.ABITypeToCSharpType
            export interface ABITypeToCSharpType extends ABITypeToDotNetTypeBase, ITypeConvertor {
            }
            export interface ABITypeToCSharpTypeTypeFunc extends TypeFunction {
                (): ABITypeToCSharpTypeTypeFunc;
                prototype: ABITypeToCSharpType;
                new (): ABITypeToCSharpType;
                ctor: { new (): ABITypeToCSharpType; };
            }
            const ABITypeToCSharpType: ABITypeToCSharpTypeTypeFunc;

            // Nethereum.Generators.Core.ABITypeToDotNetTypeBase
            export interface ABITypeToDotNetTypeBase extends System.Object, ITypeConvertor {
                Convert(typeName: string, dotnetClassName?: string, outputArrayAsList?: boolean): string;
            }
            export interface ABITypeToDotNetTypeBaseTypeFunc extends TypeFunction {
                (): ABITypeToDotNetTypeBaseTypeFunc;
                prototype: ABITypeToDotNetTypeBase;
            }
            const ABITypeToDotNetTypeBase: ABITypeToDotNetTypeBaseTypeFunc;

            // Nethereum.Generators.Core.ABITypeToFSharpType
            export interface ABITypeToFSharpType extends ABITypeToDotNetTypeBase, ITypeConvertor {
            }
            export interface ABITypeToFSharpTypeTypeFunc extends TypeFunction {
                (): ABITypeToFSharpTypeTypeFunc;
                prototype: ABITypeToFSharpType;
                new (): ABITypeToFSharpType;
                ctor: { new (): ABITypeToFSharpType; };
            }
            const ABITypeToFSharpType: ABITypeToFSharpTypeTypeFunc;

            // Nethereum.Generators.Core.ABITypeToVBType
            export interface ABITypeToVBType extends ABITypeToDotNetTypeBase, ITypeConvertor {
            }
            export interface ABITypeToVBTypeTypeFunc extends TypeFunction {
                (): ABITypeToVBTypeTypeFunc;
                prototype: ABITypeToVBType;
                new (): ABITypeToVBType;
                ctor: { new (): ABITypeToVBType; };
            }
            const ABITypeToVBType: ABITypeToVBTypeTypeFunc;

            // Nethereum.Generators.Core.ClassGeneratorBase<TClassTemplate, TClassModel>
            export interface ClassGeneratorBase$2<TClassTemplate, TClassModel> extends System.Object, IFileGenerator, IGenerator, IClassGenerator {
                get_ClassModel(): TClassModel;
                set_ClassModel(value: TClassModel): void;
                GenerateFileContent$1(outputPath: string): GeneratedFile;
                GenerateFileContent(): string;
                GetFileName(): string;
                GenerateClass(): string;
            }
            export interface ClassGeneratorBase$2TypeFunc<TClassTemplate, TClassModel> extends TypeFunction {
                (): ClassGeneratorBase$2TypeFunc<TClassTemplate, TClassModel>;
                prototype: ClassGeneratorBase$2<TClassTemplate, TClassModel>;
                new (): ClassGeneratorBase$2<TClassTemplate, TClassModel>;
                ctor: { new (): ClassGeneratorBase$2<TClassTemplate, TClassModel>; };
            }
            export function ClassGeneratorBase$2<TClassTemplate, TClassModel>(TClassTemplate: TypeArg<TClassTemplate>, TClassModel: TypeArg<TClassModel>): ClassGeneratorBase$2TypeFunc<TClassTemplate, TClassModel>;

            // Nethereum.Generators.Core.CodeGenLanguage
            export enum CodeGenLanguage {
                CSharp = 0,
                Vb = 1,
                Proto = 2,
                FSharp = 3
            }

            // Nethereum.Generators.Core.CodeGenLanguageExt
            export interface CodeGenLanguageExtTypeFunc extends TypeFunction {
                (): CodeGenLanguageExtTypeFunc;
                ProjectFileExtensions: System.Collections.Generic.Dictionary$2<CodeGenLanguage, string>;
                LanguageMappings: System.Collections.Generic.Dictionary$2<string, CodeGenLanguage>;
                DotNetCliLanguage: System.Collections.Generic.Dictionary$2<CodeGenLanguage, string>;
                GetValidProjectFileExtensions(): System.Collections.Generic.IEnumerable$1<string>;
                ParseLanguage(languageTag: string): CodeGenLanguage;
                ToDotNetCli(language: CodeGenLanguage): string;
                AddProjectFileExtension(language: CodeGenLanguage, projectFileName: string): string;
                GetCodeGenLanguageFromProjectFile(projectFilePath: string): CodeGenLanguage;
                GetCodeOutputFileExtension(codeGenLanguage: CodeGenLanguage): string;
                StringComparerIgnoreCase: CodeGenLanguageExt.StringComparerIgnoreCaseTypeFunc;
            }
            const CodeGenLanguageExt: CodeGenLanguageExtTypeFunc;

            // Nethereum.Generators.Core.CommonGenerators
            export interface CommonGenerators extends System.Object {
                GenerateVariableName(value: string, codeGenLanguage: CodeGenLanguage): string;
                GeneratePropertyName(value: string, codeGenLanguage: CodeGenLanguage): string;
                GenerateClassName(value: string): string;
            }
            export interface CommonGeneratorsTypeFunc extends TypeFunction {
                (): CommonGeneratorsTypeFunc;
                prototype: CommonGenerators;
                new (): CommonGenerators;
                ctor: { new (): CommonGenerators; };
            }
            const CommonGenerators: CommonGeneratorsTypeFunc;

            // Nethereum.Generators.Core.Keywords
            export interface KeywordsTypeFunc extends TypeFunction {
                (): KeywordsTypeFunc;
                CSharp: string[];
                VbNet: string[];
                FSharp: string[];
                EscapeKeywordMatch(value: string, codeGenLanguage: CodeGenLanguage): string;
                IsMatch(value: string, list: string[]): boolean;
            }
            const Keywords: KeywordsTypeFunc;

            // Nethereum.Generators.Core.FileModel
            export interface FileModel extends System.Object, IFileModel {
                get_Name(): string;
                get_CodeGenLanguage(): CodeGenLanguage;
                set_CodeGenLanguage(value: CodeGenLanguage): void;
                GetFileName(): string;
                get_Namespace(): string;
                get_NamespaceDependencies(): System.Collections.Generic.List$1<string>;
            }
            export interface FileModelTypeFunc extends TypeFunction {
                (): FileModelTypeFunc;
                prototype: FileModel;
                new (namespace: string, name: string): FileModel;
                ctor: { new (namespace: string, name: string): FileModel; };
            }
            const FileModel: FileModelTypeFunc;

            // Nethereum.Generators.Core.GeneratedFile
            export interface GeneratedFile extends System.Object {
                get_GeneratedCode(): string;
                get_FileName(): string;
                get_OutputFolder(): string;
            }
            export interface GeneratedFileTypeFunc extends TypeFunction {
                (): GeneratedFileTypeFunc;
                prototype: GeneratedFile;
                new (generatedCode: string, fileName: string, outputFolder: string): GeneratedFile;
                ctor: { new (generatedCode: string, fileName: string, outputFolder: string): GeneratedFile; };
            }
            const GeneratedFile: GeneratedFileTypeFunc;

            // Nethereum.Generators.Core.IClassGenerator
            export interface IClassGenerator {
                Nethereum$Generators$Core$IClassGenerator$GenerateClass(): string;
            }
            const IClassGenerator: TypeFunction;

            // Nethereum.Generators.Core.IClassModel
            export interface IClassModel extends IFileModel {
                Nethereum$Generators$Core$IClassModel$GetTypeName(): string;
                Nethereum$Generators$Core$IClassModel$GetVariableName(): string;
            }
            const IClassModel: TypeFunction;

            // Nethereum.Generators.Core.IFileModel
            export interface IFileModel {
                Nethereum$Generators$Core$IFileModel$GetFileName(): string;
                Nethereum$Generators$Core$IFileModel$get_Namespace(): string;
                Nethereum$Generators$Core$IFileModel$get_NamespaceDependencies(): System.Collections.Generic.List$1<string>;
            }
            const IFileModel: TypeFunction;

            // Nethereum.Generators.Core.IClassTemplate
            export interface IClassTemplate {
                Nethereum$Generators$Core$IClassTemplate$GenerateClass(): string;
                Nethereum$Generators$Core$IClassTemplate$GenerateFullClass(): string;
            }
            const IClassTemplate: TypeFunction;

            // Nethereum.Generators.Core.IFileGenerator
            export interface IFileGenerator extends IGenerator {
                Nethereum$Generators$Core$IFileGenerator$GenerateFileContent$1(outputPath: string): GeneratedFile;
                Nethereum$Generators$Core$IFileGenerator$GenerateFileContent(): string;
                Nethereum$Generators$Core$IFileGenerator$GetFileName(): string;
            }
            const IFileGenerator: TypeFunction;

            // Nethereum.Generators.Core.IGenerator
            export interface IGenerator {
                Nethereum$Generators$Core$IGenerator$GenerateClass(): string;
            }
            const IGenerator: TypeFunction;

            // Nethereum.Generators.Core.IMessage<TParameter>
            export interface IMessage$1<TParameter> {
                Nethereum$Generators$Core$IMessage$1$get_InputParameters(): TParameter[];
                Nethereum$Generators$Core$IMessage$1$get_Name(): string;
                Nethereum$Generators$Core$IMessage$1$set_Name(value: string): void;
            }
            export function IMessage$1<TParameter>(TParameter: TypeArg<TParameter>): TypeFunction;

            // Nethereum.Generators.Core.ITypeConvertor
            export interface ITypeConvertor {
                Nethereum$Generators$Core$ITypeConvertor$Convert(typeName: string, dotnetClassName: string, outputArrayAsList?: boolean): string;
            }
            const ITypeConvertor: TypeFunction;

            // Nethereum.Generators.Core.MessageMap<MFrom, MTo, PFrom, PTo>
            export interface MessageMap$4<MFrom, MTo, PFrom, PTo> extends System.Object {
                get_From(): MFrom;
                set_From(value: MFrom): void;
                get_To(): MTo;
                set_To(value: MTo): void;
                get_ParameterMaps(): System.Collections.Generic.List$1<ParameterMap$2<PFrom, PTo>>;
                set_ParameterMaps(value: System.Collections.Generic.List$1<ParameterMap$2<PFrom, PTo>>): void;
            }
            export interface MessageMap$4TypeFunc<MFrom, MTo, PFrom, PTo> extends TypeFunction {
                (): MessageMap$4TypeFunc<MFrom, MTo, PFrom, PTo>;
                prototype: MessageMap$4<MFrom, MTo, PFrom, PTo>;
                new (from: MFrom, to: MTo, parameterMaps: System.Collections.Generic.List$1<ParameterMap$2<PFrom, PTo>>): MessageMap$4<MFrom, MTo, PFrom, PTo>;
                ctor: { new (from: MFrom, to: MTo, parameterMaps: System.Collections.Generic.List$1<ParameterMap$2<PFrom, PTo>>): MessageMap$4<MFrom, MTo, PFrom, PTo>; };
            }
            export function MessageMap$4<MFrom, MTo, PFrom, PTo>(MFrom: TypeArg<MFrom>, MTo: TypeArg<MTo>, PFrom: TypeArg<PFrom>, PTo: TypeArg<PTo>): MessageMap$4TypeFunc<MFrom, MTo, PFrom, PTo>;

            // Nethereum.Generators.Core.MultipleClassGeneratorBase<TMultipleClassFileTemplate, TMultipleClassFileModel>
            export interface MultipleClassGeneratorBase$2<TMultipleClassFileTemplate, TMultipleClassFileModel> extends System.Object, IFileGenerator, IGenerator {
                GenerateFileContent$1(outputPath: string): GeneratedFile;
                GenerateFileContent(): string;
                GetFileName(): string;
                GenerateClass(): string;
            }
            export interface MultipleClassGeneratorBase$2TypeFunc<TMultipleClassFileTemplate, TMultipleClassFileModel> extends TypeFunction {
                (): MultipleClassGeneratorBase$2TypeFunc<TMultipleClassFileTemplate, TMultipleClassFileModel>;
                prototype: MultipleClassGeneratorBase$2<TMultipleClassFileTemplate, TMultipleClassFileModel>;
                new (): MultipleClassGeneratorBase$2<TMultipleClassFileTemplate, TMultipleClassFileModel>;
                ctor: { new (): MultipleClassGeneratorBase$2<TMultipleClassFileTemplate, TMultipleClassFileModel>; };
            }
            export function MultipleClassGeneratorBase$2<TMultipleClassFileTemplate, TMultipleClassFileModel>(TMultipleClassFileTemplate: TypeArg<TMultipleClassFileTemplate>, TMultipleClassFileModel: TypeArg<TMultipleClassFileModel>): MultipleClassGeneratorBase$2TypeFunc<TMultipleClassFileTemplate, TMultipleClassFileModel>;

            // Nethereum.Generators.Core.Parameter
            export interface Parameter extends System.Object {
                get_Name(): string;
                get_Type(): string;
                get_Order(): int;
            }
            export interface ParameterTypeFunc extends TypeFunction {
                (): ParameterTypeFunc;
                prototype: Parameter;
                new (name: string, type: string, order: int): Parameter;
                ctor: { new (name: string, type: string, order: int): Parameter; };
            }
            const Parameter: ParameterTypeFunc;

            // Nethereum.Generators.Core.ParameterDirection
            export enum ParameterDirection {
                Input = 0,
                Output = 1
            }

            // Nethereum.Generators.Core.ParameterMap<T1, T2>
            export interface ParameterMap$2<T1, T2> extends System.Object {
                get_From(): T1;
                set_From(value: T1): void;
                get_To(): T2;
                set_To(value: T2): void;
            }
            export interface ParameterMap$2TypeFunc<T1, T2> extends TypeFunction {
                (): ParameterMap$2TypeFunc<T1, T2>;
                prototype: ParameterMap$2<T1, T2>;
                new (from: T1, to: T2): ParameterMap$2<T1, T2>;
                ctor: { new (from: T1, to: T2): ParameterMap$2<T1, T2>; };
            }
            export function ParameterMap$2<T1, T2>(T1: TypeArg<T1>, T2: TypeArg<T2>): ParameterMap$2TypeFunc<T1, T2>;

            // Nethereum.Generators.Core.ParameterMapperAssignerCSharpTemplate<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>
            export interface ParameterMapperAssignerCSharpTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo> extends ParameterMapperAssignerTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo> {
            }
            export interface ParameterMapperAssignerCSharpTemplate$4TypeFunc<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo> extends TypeFunction {
                (): ParameterMapperAssignerCSharpTemplate$4TypeFunc<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>;
                prototype: ParameterMapperAssignerCSharpTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>;
                new (): ParameterMapperAssignerCSharpTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>;
                ctor: { new (): ParameterMapperAssignerCSharpTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>; };
            }
            export function ParameterMapperAssignerCSharpTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>(TParameterModelFrom: TypeArg<TParameterModelFrom>, TParameterModelTo: TypeArg<TParameterModelTo>, TParameterFrom: TypeArg<TParameterFrom>, TParameterTo: TypeArg<TParameterTo>): ParameterMapperAssignerCSharpTemplate$4TypeFunc<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>;

            // Nethereum.Generators.Core.ParameterMapperAssignerTemplate<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>
            export interface ParameterMapperAssignerTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo> extends System.Object {
                GenerateMappingAssigment$1(map: ParameterMap$2<TParameterFrom, TParameterTo>, variableSourceName: string, destinationVariableName: string): string;
                GenerateMappingAssigment(map: ParameterMap$2<TParameterFrom, TParameterTo>, variableSourceName: string): string;
                GenerateMappingsReturn$1(map: ParameterMap$2<TParameterFrom, TParameterTo>, variableSourceName: string, destinationVariableName: string): string;
                GenerateMappingsReturn(map: ParameterMap$2<TParameterFrom, TParameterTo>, variableSourceName: string): string;
            }
            export interface ParameterMapperAssignerTemplate$4TypeFunc<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo> extends TypeFunction {
                (): ParameterMapperAssignerTemplate$4TypeFunc<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>;
                prototype: ParameterMapperAssignerTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>;
                new (): ParameterMapperAssignerTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>;
                ctor: { new (): ParameterMapperAssignerTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>; };
            }
            export function ParameterMapperAssignerTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>(TParameterModelFrom: TypeArg<TParameterModelFrom>, TParameterModelTo: TypeArg<TParameterModelTo>, TParameterFrom: TypeArg<TParameterFrom>, TParameterTo: TypeArg<TParameterTo>): ParameterMapperAssignerTemplate$4TypeFunc<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>;

            // Nethereum.Generators.Core.ParameterMapperAssignerVbTemplate<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>
            export interface ParameterMapperAssignerVbTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo> extends ParameterMapperAssignerTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo> {
            }
            export interface ParameterMapperAssignerVbTemplate$4TypeFunc<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo> extends TypeFunction {
                (): ParameterMapperAssignerVbTemplate$4TypeFunc<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>;
                prototype: ParameterMapperAssignerVbTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>;
                new (): ParameterMapperAssignerVbTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>;
                ctor: { new (): ParameterMapperAssignerVbTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>; };
            }
            export function ParameterMapperAssignerVbTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>(TParameterModelFrom: TypeArg<TParameterModelFrom>, TParameterModelTo: TypeArg<TParameterModelTo>, TParameterFrom: TypeArg<TParameterFrom>, TParameterTo: TypeArg<TParameterTo>): ParameterMapperAssignerVbTemplate$4TypeFunc<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>;

            // Nethereum.Generators.Core.ParameterModel<TParameter>
            export interface ParameterModel$1<TParameter> extends System.Object {
                get_CodeGenLanguage(): CodeGenLanguage;
                get_Parameter(): TParameter;
                set_Parameter(value: TParameter): void;
                GetVariableName(): string;
                GetPropertyName(): string;
            }
            export interface ParameterModel$1TypeFunc<TParameter> extends TypeFunction {
                (): ParameterModel$1TypeFunc<TParameter>;
                prototype: ParameterModel$1<TParameter>;
                new (codeGenLanguage: CodeGenLanguage): ParameterModel$1<TParameter>;
                ctor: { new (codeGenLanguage: CodeGenLanguage): ParameterModel$1<TParameter>; };
                ctor$1: { new (parameter: TParameter, codeGenLanguage: CodeGenLanguage): ParameterModel$1<TParameter>; };
            }
            export function ParameterModel$1<TParameter>(TParameter: TypeArg<TParameter>): ParameterModel$1TypeFunc<TParameter>;

            // Nethereum.Generators.Core.SpaceUtils
            export interface SpaceUtils extends System.Object {
            }
            export interface SpaceUtilsTypeFunc extends TypeFunction {
                (): SpaceUtilsTypeFunc;
                prototype: SpaceUtils;
                NoTabs: string;
                OneTab: string;
                TwoTabs: string;
                ThreeTabs: string;
                FourTabs: string;
                FiveTabs: string;
                new (): SpaceUtils;
                ctor: { new (): SpaceUtils; };
            }
            const SpaceUtils: SpaceUtilsTypeFunc;

            // Nethereum.Generators.Core.TypeMessageModel
            export interface TypeMessageModel extends System.Object, IClassModel, IFileModel {
                get_Namespace(): string;
                get_Name(): string;
                get_ClassNameSuffix(): string;
                get_NamespaceDependencies(): System.Collections.Generic.List$1<string>;
                get_CodeGenLanguage(): CodeGenLanguage;
                set_CodeGenLanguage(value: CodeGenLanguage): void;
                GetTypeName$1(name: string): string;
                GetFileName$1(name: string): string;
                GetVariableName$1(name: string): string;
                GetTypeName(): string;
                GetFileName(): string;
                GetVariableName(): string;
            }
            export interface TypeMessageModelTypeFunc extends TypeFunction {
                (): TypeMessageModelTypeFunc;
                prototype: TypeMessageModel;
            }
            const TypeMessageModel: TypeMessageModelTypeFunc;

            // Nethereum.Generators.Core.Utils
            export interface Utils extends System.Object {
                RemoveUnderscorePrefix(value: string): string;
                LowerCaseFirstCharAndRemoveUnderscorePrefix(value: string): string;
                CapitaliseFirstCharAndRemoveUnderscorePrefix(value: string): string;
                LowerCaseFirstChar(value: string): string;
                CapitaliseFirstChar(value: string): string;
                GetBooleanAsString(value: boolean): string;
            }
            export interface UtilsTypeFunc extends TypeFunction {
                (): UtilsTypeFunc;
                prototype: Utils;
                new (): Utils;
                ctor: { new (): Utils; };
            }
            const Utils: UtilsTypeFunc;
            module CodeGenLanguageExt {
                // Nethereum.Generators.Core.CodeGenLanguageExt.StringComparerIgnoreCase
                export interface StringComparerIgnoreCase extends System.Object, System.Collections.Generic.IEqualityComparer$1<String> {
                    Equals$1(x: string, y: string): boolean;
                    GetHashCode$1(obj: string): int;
                }
                export interface StringComparerIgnoreCaseTypeFunc extends TypeFunction {
                    (): StringComparerIgnoreCaseTypeFunc;
                    prototype: StringComparerIgnoreCase;
                    new (): StringComparerIgnoreCase;
                    ctor: { new (): StringComparerIgnoreCase; };
                }
            }
        }
        module Model {
            // Nethereum.Generators.Model.ConstructorABI
            export interface ConstructorABI extends System.Object, Core.IMessage$1<ParameterABI> {
                get_Name(): string;
                set_Name(value: string): void;
                get_InputParameters(): ParameterABI[];
                set_InputParameters(value: ParameterABI[]): void;
            }
            export interface ConstructorABITypeFunc extends TypeFunction {
                (): ConstructorABITypeFunc;
                prototype: ConstructorABI;
                new (): ConstructorABI;
                ctor: { new (): ConstructorABI; };
            }
            const ConstructorABI: ConstructorABITypeFunc;

            // Nethereum.Generators.Model.ContractABI
            export interface ContractABI extends System.Object {
                get_Functions(): FunctionABI[];
                set_Functions(value: FunctionABI[]): void;
                get_Constructor(): ConstructorABI;
                set_Constructor(value: ConstructorABI): void;
                get_Events(): EventABI[];
                set_Events(value: EventABI[]): void;
                get_Errors(): ErrorABI[];
                set_Errors(value: ErrorABI[]): void;
                get_Structs(): StructABI[];
                set_Structs(value: StructABI[]): void;
                GetAllFunctionsWithSameName(name: string): System.Collections.Generic.List$1<FunctionABI>;
                GetAllEventsWithSameName(name: string): System.Collections.Generic.List$1<EventABI>;
                GetAllErrorsWithSameName(name: string): System.Collections.Generic.List$1<ErrorABI>;
            }
            export interface ContractABITypeFunc extends TypeFunction {
                (): ContractABITypeFunc;
                prototype: ContractABI;
                new (): ContractABI;
                ctor: { new (): ContractABI; };
            }
            const ContractABI: ContractABITypeFunc;

            // Nethereum.Generators.Model.ErrorABI
            export interface ErrorABI extends System.Object {
                get_ContractAbi(): ContractABI;
                get_Name(): string;
                get_InputParameters(): ParameterABI[];
                set_InputParameters(value: ParameterABI[]): void;
            }
            export interface ErrorABITypeFunc extends TypeFunction {
                (): ErrorABITypeFunc;
                prototype: ErrorABI;
                new (name: string, contract: ContractABI): ErrorABI;
                ctor: { new (name: string, contract: ContractABI): ErrorABI; };
            }
            const ErrorABI: ErrorABITypeFunc;

            // Nethereum.Generators.Model.EventABI
            export interface EventABI extends System.Object {
                get_Name(): string;
                get_InputParameters(): ParameterABI[];
                set_InputParameters(value: ParameterABI[]): void;
                get_ContractAbi(): ContractABI;
            }
            export interface EventABITypeFunc extends TypeFunction {
                (): EventABITypeFunc;
                prototype: EventABI;
                new (name: string, contract: ContractABI): EventABI;
                ctor: { new (name: string, contract: ContractABI): EventABI; };
            }
            const EventABI: EventABITypeFunc;

            // Nethereum.Generators.Model.FunctionABI
            export interface FunctionABI extends System.Object, Core.IMessage$1<ParameterABI> {
                get_Serpent(): boolean;
                get_Constant(): boolean;
                get_Name(): string;
                set_Name(value: string): void;
                get_InputParameters(): ParameterABI[];
                set_InputParameters(value: ParameterABI[]): void;
                get_OutputParameters(): ParameterABI[];
                set_OutputParameters(value: ParameterABI[]): void;
                get_ContractAbi(): ContractABI;
            }
            export interface FunctionABITypeFunc extends TypeFunction {
                (): FunctionABITypeFunc;
                prototype: FunctionABI;
                new (name: string, constant: boolean, contract: ContractABI, serpent?: boolean): FunctionABI;
                ctor: { new (name: string, constant: boolean, contract: ContractABI, serpent?: boolean): FunctionABI; };
            }
            const FunctionABI: FunctionABITypeFunc;

            // Nethereum.Generators.Model.FunctionEventOverloadTypeNameBuilder
            export interface FunctionEventOverloadTypeNameBuilderTypeFunc extends TypeFunction {
                (): FunctionEventOverloadTypeNameBuilderTypeFunc;
                GetFunctionTypeNameBasedOnOverloads(functionAbi: FunctionABI): string;
                GetEventTypeNameBasedOnOverloads(eventAbi: EventABI): string;
                GetErrorTypeNameBasedOnOverloads(errorABI: ErrorABI): string;
            }
            const FunctionEventOverloadTypeNameBuilder: FunctionEventOverloadTypeNameBuilderTypeFunc;

            // Nethereum.Generators.Model.ParameterABI
            export interface ParameterABI extends Core.Parameter {
                get_StructType(): string;
                set_StructType(value: string): void;
                get_Indexed(): boolean;
                set_Indexed(value: boolean): void;
            }
            export interface ParameterABITypeFunc extends TypeFunction {
                (): ParameterABITypeFunc;
                prototype: ParameterABI;
                ctor$1: { new (type: string, name?: string, order?: int, structType?: string): ParameterABI; };
                new (type: string, order: int): ParameterABI;
                ctor: { new (type: string, order: int): ParameterABI; };
            }
            const ParameterABI: ParameterABITypeFunc;

            // Nethereum.Generators.Model.StructABI
            export interface StructABI extends System.Object, Core.IMessage$1<ParameterABI> {
                get_InputParameters(): ParameterABI[];
                set_InputParameters(value: ParameterABI[]): void;
                get_Name(): string;
                set_Name(value: string): void;
            }
            export interface StructABITypeFunc extends TypeFunction {
                (): StructABITypeFunc;
                prototype: StructABI;
                new (name: string): StructABI;
                ctor: { new (name: string): StructABI; };
            }
            const StructABI: StructABITypeFunc;
        }
        module Service {
            // Nethereum.Generators.Service.AllMessagesGenerator
            export interface AllMessagesGenerator extends Core.MultipleClassGeneratorBase$2<CQS.MultipleClassFileTemplate, AllMessagesModel>, Core.IFileGenerator, Core.IGenerator {
                InitialiseTemplate(codeGenLanguage: Core.CodeGenLanguage): void;
            }
            export interface AllMessagesGeneratorTypeFunc extends TypeFunction {
                (): AllMessagesGeneratorTypeFunc;
                prototype: AllMessagesGenerator;
                new (classGenerators: System.Collections.Generic.IEnumerable$1<Core.IClassGenerator>, contractName: string, namespace: string, codeGenLanguage: Core.CodeGenLanguage): AllMessagesGenerator;
                ctor: { new (classGenerators: System.Collections.Generic.IEnumerable$1<Core.IClassGenerator>, contractName: string, namespace: string, codeGenLanguage: Core.CodeGenLanguage): AllMessagesGenerator; };
            }
            const AllMessagesGenerator: AllMessagesGeneratorTypeFunc;

            // Nethereum.Generators.Service.AllMessagesModel
            export interface AllMessagesModel extends Core.FileModel, Core.IFileModel {
                get_ContractDeploymentCQSMessageModel(): CQS.ContractDeploymentCQSMessageModel;
            }
            export interface AllMessagesModelTypeFunc extends TypeFunction {
                (): AllMessagesModelTypeFunc;
                prototype: AllMessagesModel;
                new (contractName: string, namespace: string): AllMessagesModel;
                ctor: { new (contractName: string, namespace: string): AllMessagesModel; };
            }
            const AllMessagesModel: AllMessagesModelTypeFunc;

            // Nethereum.Generators.Service.ServiceGenerator
            export interface ServiceGenerator extends Core.ClassGeneratorBase$2<CQS.ClassTemplateBase$1<ServiceModel>, ServiceModel>, Core.IFileGenerator, Core.IGenerator, Core.IClassGenerator {
                get_ContractABI(): Model.ContractABI;
                InitialiseTemplate(codeGenLanguage: Core.CodeGenLanguage): void;
            }
            export interface ServiceGeneratorTypeFunc extends TypeFunction {
                (): ServiceGeneratorTypeFunc;
                prototype: ServiceGenerator;
                new (contractABI: Model.ContractABI, contractName: string, byteCode: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string, codeGenLanguage: Core.CodeGenLanguage): ServiceGenerator;
                ctor: { new (contractABI: Model.ContractABI, contractName: string, byteCode: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string, codeGenLanguage: Core.CodeGenLanguage): ServiceGenerator; };
            }
            const ServiceGenerator: ServiceGeneratorTypeFunc;

            // Nethereum.Generators.Service.ServiceModel
            export interface ServiceModel extends Core.TypeMessageModel, Core.IClassModel, Core.IFileModel {
                get_ContractABI(): Model.ContractABI;
                get_CQSNamespace(): string;
                get_FunctionOutputNamespace(): string;
                get_ContractDeploymentCQSMessageModel(): CQS.ContractDeploymentCQSMessageModel;
            }
            export interface ServiceModelTypeFunc extends TypeFunction {
                (): ServiceModelTypeFunc;
                prototype: ServiceModel;
                new (contractABI: Model.ContractABI, contractName: string, byteCode: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string): ServiceModel;
                ctor: { new (contractABI: Model.ContractABI, contractName: string, byteCode: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string): ServiceModel; };
            }
            const ServiceModel: ServiceModelTypeFunc;

            // Nethereum.Generators.Service.ContractDeploymentServiceMethodsCSharpTemplate
            export interface ContractDeploymentServiceMethodsCSharpTemplate extends System.Object {
                GenerateMethods(): string;
            }
            export interface ContractDeploymentServiceMethodsCSharpTemplateTypeFunc extends TypeFunction {
                (): ContractDeploymentServiceMethodsCSharpTemplateTypeFunc;
                prototype: ContractDeploymentServiceMethodsCSharpTemplate;
                new (model: ServiceModel): ContractDeploymentServiceMethodsCSharpTemplate;
                ctor: { new (model: ServiceModel): ContractDeploymentServiceMethodsCSharpTemplate; };
            }
            const ContractDeploymentServiceMethodsCSharpTemplate: ContractDeploymentServiceMethodsCSharpTemplateTypeFunc;

            // Nethereum.Generators.Service.FunctionServiceMethodCSharpTemplate
            export interface FunctionServiceMethodCSharpTemplate extends System.Object {
                GenerateMethods(): string;
                GenerateMethod(functionABI: Model.FunctionABI): string;
            }
            export interface FunctionServiceMethodCSharpTemplateTypeFunc extends TypeFunction {
                (): FunctionServiceMethodCSharpTemplateTypeFunc;
                prototype: FunctionServiceMethodCSharpTemplate;
                new (model: ServiceModel): FunctionServiceMethodCSharpTemplate;
                ctor: { new (model: ServiceModel): FunctionServiceMethodCSharpTemplate; };
            }
            const FunctionServiceMethodCSharpTemplate: FunctionServiceMethodCSharpTemplateTypeFunc;

            // Nethereum.Generators.Service.ServiceCSharpTemplate
            export interface ServiceCSharpTemplate extends CQS.ClassTemplateBase$1<ServiceModel>, Core.IClassTemplate {
            }
            export interface ServiceCSharpTemplateTypeFunc extends TypeFunction {
                (): ServiceCSharpTemplateTypeFunc;
                prototype: ServiceCSharpTemplate;
                new (model: ServiceModel): ServiceCSharpTemplate;
                ctor: { new (model: ServiceModel): ServiceCSharpTemplate; };
            }
            const ServiceCSharpTemplate: ServiceCSharpTemplateTypeFunc;

            // Nethereum.Generators.Service.ContractDeploymentServiceMethodsFSharpTemplate
            export interface ContractDeploymentServiceMethodsFSharpTemplate extends System.Object {
                GenerateMethods(): string;
            }
            export interface ContractDeploymentServiceMethodsFSharpTemplateTypeFunc extends TypeFunction {
                (): ContractDeploymentServiceMethodsFSharpTemplateTypeFunc;
                prototype: ContractDeploymentServiceMethodsFSharpTemplate;
                new (model: ServiceModel): ContractDeploymentServiceMethodsFSharpTemplate;
                ctor: { new (model: ServiceModel): ContractDeploymentServiceMethodsFSharpTemplate; };
            }
            const ContractDeploymentServiceMethodsFSharpTemplate: ContractDeploymentServiceMethodsFSharpTemplateTypeFunc;

            // Nethereum.Generators.Service.FunctionServiceMethodFSharpTemplate
            export interface FunctionServiceMethodFSharpTemplate extends System.Object {
                GenerateMethods(): string;
                GenerateMethod(functionABI: Model.FunctionABI): string;
            }
            export interface FunctionServiceMethodFSharpTemplateTypeFunc extends TypeFunction {
                (): FunctionServiceMethodFSharpTemplateTypeFunc;
                prototype: FunctionServiceMethodFSharpTemplate;
                new (model: ServiceModel): FunctionServiceMethodFSharpTemplate;
                ctor: { new (model: ServiceModel): FunctionServiceMethodFSharpTemplate; };
            }
            const FunctionServiceMethodFSharpTemplate: FunctionServiceMethodFSharpTemplateTypeFunc;

            // Nethereum.Generators.Service.ServiceFSharpTemplate
            export interface ServiceFSharpTemplate extends CQS.ClassTemplateBase$1<ServiceModel>, Core.IClassTemplate {
            }
            export interface ServiceFSharpTemplateTypeFunc extends TypeFunction {
                (): ServiceFSharpTemplateTypeFunc;
                prototype: ServiceFSharpTemplate;
                new (model: ServiceModel): ServiceFSharpTemplate;
                ctor: { new (model: ServiceModel): ServiceFSharpTemplate; };
            }
            const ServiceFSharpTemplate: ServiceFSharpTemplateTypeFunc;

            // Nethereum.Generators.Service.ContractDeploymentServiceMethodsVbTemplate
            export interface ContractDeploymentServiceMethodsVbTemplate extends System.Object {
                GenerateMethods(): string;
            }
            export interface ContractDeploymentServiceMethodsVbTemplateTypeFunc extends TypeFunction {
                (): ContractDeploymentServiceMethodsVbTemplateTypeFunc;
                prototype: ContractDeploymentServiceMethodsVbTemplate;
                new (model: ServiceModel): ContractDeploymentServiceMethodsVbTemplate;
                ctor: { new (model: ServiceModel): ContractDeploymentServiceMethodsVbTemplate; };
            }
            const ContractDeploymentServiceMethodsVbTemplate: ContractDeploymentServiceMethodsVbTemplateTypeFunc;

            // Nethereum.Generators.Service.FunctionServiceMethodVbTemplate
            export interface FunctionServiceMethodVbTemplate extends System.Object {
                GenerateMethods(): string;
                GenerateMethod(functionABI: Model.FunctionABI): string;
            }
            export interface FunctionServiceMethodVbTemplateTypeFunc extends TypeFunction {
                (): FunctionServiceMethodVbTemplateTypeFunc;
                prototype: FunctionServiceMethodVbTemplate;
                new (model: ServiceModel): FunctionServiceMethodVbTemplate;
                ctor: { new (model: ServiceModel): FunctionServiceMethodVbTemplate; };
            }
            const FunctionServiceMethodVbTemplate: FunctionServiceMethodVbTemplateTypeFunc;

            // Nethereum.Generators.Service.ServiceVbTemplate
            export interface ServiceVbTemplate extends CQS.ClassTemplateBase$1<ServiceModel>, Core.IClassTemplate {
            }
            export interface ServiceVbTemplateTypeFunc extends TypeFunction {
                (): ServiceVbTemplateTypeFunc;
                prototype: ServiceVbTemplate;
                new (model: ServiceModel): ServiceVbTemplate;
                ctor: { new (model: ServiceModel): ServiceVbTemplate; };
            }
            const ServiceVbTemplate: ServiceVbTemplateTypeFunc;
        }
        module Console {
            // Nethereum.Generators.Console.ConsoleGenerator
            export interface ConsoleGenerator extends Core.ClassGeneratorBase$2<CQS.ClassTemplateBase$1<ConsoleModel>, ConsoleModel>, Core.IFileGenerator, Core.IGenerator, Core.IClassGenerator {
                get_ContractABI(): Model.ContractABI;
                InitialiseTemplate(codeGenLanguage: Core.CodeGenLanguage): void;
            }
            export interface ConsoleGeneratorTypeFunc extends TypeFunction {
                (): ConsoleGeneratorTypeFunc;
                prototype: ConsoleGenerator;
                new (contractABI: Model.ContractABI, contractName: string, byteCode: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string, codeGenLanguage: Core.CodeGenLanguage): ConsoleGenerator;
                ctor: { new (contractABI: Model.ContractABI, contractName: string, byteCode: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string, codeGenLanguage: Core.CodeGenLanguage): ConsoleGenerator; };
            }
            const ConsoleGenerator: ConsoleGeneratorTypeFunc;

            // Nethereum.Generators.Console.ConsoleModel
            export interface ConsoleModel extends Core.TypeMessageModel, Core.IClassModel, Core.IFileModel {
                get_ContractABI(): Model.ContractABI;
                get_CQSNamespace(): string;
                get_FunctionOutputNamespace(): string;
                get_ContractDeploymentCQSMessageModel(): CQS.ContractDeploymentCQSMessageModel;
            }
            export interface ConsoleModelTypeFunc extends TypeFunction {
                (): ConsoleModelTypeFunc;
                prototype: ConsoleModel;
                new (contractABI: Model.ContractABI, contractName: string, byteCode: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string): ConsoleModel;
                ctor: { new (contractABI: Model.ContractABI, contractName: string, byteCode: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string): ConsoleModel; };
            }
            const ConsoleModel: ConsoleModelTypeFunc;
            module CSharp {
                // Nethereum.Generators.Console.CSharp.ConsoleCSharpTemplate
                export interface ConsoleCSharpTemplate extends CQS.ClassTemplateBase$1<ConsoleModel>, Core.IClassTemplate {
                }
                export interface ConsoleCSharpTemplateTypeFunc extends TypeFunction {
                    (): ConsoleCSharpTemplateTypeFunc;
                    prototype: ConsoleCSharpTemplate;
                    new (model: ConsoleModel): ConsoleCSharpTemplate;
                    ctor: { new (model: ConsoleModel): ConsoleCSharpTemplate; };
                }
                const ConsoleCSharpTemplate: ConsoleCSharpTemplateTypeFunc;

                // Nethereum.Generators.Console.CSharp.ContractDeploymentMockUpMethodCSharpTemplate
                export interface ContractDeploymentMockUpMethodCSharpTemplate extends System.Object {
                    GenerateMethods(): string;
                }
                export interface ContractDeploymentMockUpMethodCSharpTemplateTypeFunc extends TypeFunction {
                    (): ContractDeploymentMockUpMethodCSharpTemplateTypeFunc;
                    prototype: ContractDeploymentMockUpMethodCSharpTemplate;
                    new (contractDeploymentCQSMessageModel: CQS.ContractDeploymentCQSMessageModel): ContractDeploymentMockUpMethodCSharpTemplate;
                    ctor: { new (contractDeploymentCQSMessageModel: CQS.ContractDeploymentCQSMessageModel): ContractDeploymentMockUpMethodCSharpTemplate; };
                }
                const ContractDeploymentMockUpMethodCSharpTemplate: ContractDeploymentMockUpMethodCSharpTemplateTypeFunc;

                // Nethereum.Generators.Console.CSharp.FunctionMockupMethodCSharpTemplate
                export interface FunctionMockupMethodCSharpTemplate extends System.Object {
                    GenerateMethods(): string;
                    GenerateMethod(functionABI: Model.FunctionABI): string;
                }
                export interface FunctionMockupMethodCSharpTemplateTypeFunc extends TypeFunction {
                    (): FunctionMockupMethodCSharpTemplateTypeFunc;
                    prototype: FunctionMockupMethodCSharpTemplate;
                    new (contractAbi: Model.ContractABI): FunctionMockupMethodCSharpTemplate;
                    ctor: { new (contractAbi: Model.ContractABI): FunctionMockupMethodCSharpTemplate; };
                }
                const FunctionMockupMethodCSharpTemplate: FunctionMockupMethodCSharpTemplateTypeFunc;
            }
            module Vb {
                // Nethereum.Generators.Console.Vb.ConsoleVbTemplate
                export interface ConsoleVbTemplate extends CQS.ClassTemplateBase$1<ConsoleModel>, Core.IClassTemplate {
                }
                export interface ConsoleVbTemplateTypeFunc extends TypeFunction {
                    (): ConsoleVbTemplateTypeFunc;
                    prototype: ConsoleVbTemplate;
                    new (model: ConsoleModel): ConsoleVbTemplate;
                    ctor: { new (model: ConsoleModel): ConsoleVbTemplate; };
                }
                const ConsoleVbTemplate: ConsoleVbTemplateTypeFunc;

                // Nethereum.Generators.Console.Vb.ContractDeploymentMockUpMethodVbTemplate
                export interface ContractDeploymentMockUpMethodVbTemplate extends System.Object {
                    GenerateMethods(): string;
                }
                export interface ContractDeploymentMockUpMethodVbTemplateTypeFunc extends TypeFunction {
                    (): ContractDeploymentMockUpMethodVbTemplateTypeFunc;
                    prototype: ContractDeploymentMockUpMethodVbTemplate;
                    new (contractDeploymentCQSMessageModel: CQS.ContractDeploymentCQSMessageModel): ContractDeploymentMockUpMethodVbTemplate;
                    ctor: { new (contractDeploymentCQSMessageModel: CQS.ContractDeploymentCQSMessageModel): ContractDeploymentMockUpMethodVbTemplate; };
                }
                const ContractDeploymentMockUpMethodVbTemplate: ContractDeploymentMockUpMethodVbTemplateTypeFunc;

                // Nethereum.Generators.Console.Vb.FunctionMockupMethodVbTemplate
                export interface FunctionMockupMethodVbTemplate extends System.Object {
                    GenerateMethods(): string;
                    GenerateMethod(functionABI: Model.FunctionABI): string;
                }
                export interface FunctionMockupMethodVbTemplateTypeFunc extends TypeFunction {
                    (): FunctionMockupMethodVbTemplateTypeFunc;
                    prototype: FunctionMockupMethodVbTemplate;
                    new (contractAbi: Model.ContractABI): FunctionMockupMethodVbTemplate;
                    ctor: { new (contractAbi: Model.ContractABI): FunctionMockupMethodVbTemplate; };
                }
                const FunctionMockupMethodVbTemplate: FunctionMockupMethodVbTemplateTypeFunc;
            }
        }
        module CQS {
            // Nethereum.Generators.CQS.ClassFileTemplate
            export interface ClassFileTemplate extends FileTemplate {
                get_ClassModel(): Core.IClassModel;
                get_ClassTemplate(): Core.IClassTemplate;
                GenerateFullClass(): string;
            }
            export interface ClassFileTemplateTypeFunc extends TypeFunction {
                (): ClassFileTemplateTypeFunc;
                prototype: ClassFileTemplate;
            }
            const ClassFileTemplate: ClassFileTemplateTypeFunc;

            // Nethereum.Generators.CQS.ClassTemplateBase<TModel>
            export interface ClassTemplateBase$1<TModel> extends System.Object, Core.IClassTemplate {
                GenerateClass(): string;
                GenerateFullClass(): string;
            }
            export interface ClassTemplateBase$1TypeFunc<TModel> extends TypeFunction {
                (): ClassTemplateBase$1TypeFunc<TModel>;
                prototype: ClassTemplateBase$1<TModel>;
            }
            export function ClassTemplateBase$1<TModel>(TModel: TypeArg<TModel>): ClassTemplateBase$1TypeFunc<TModel>;

            // Nethereum.Generators.CQS.CSharpClassFileTemplate
            export interface CSharpClassFileTemplate extends ClassFileTemplate {
            }
            export interface CSharpClassFileTemplateTypeFunc extends TypeFunction {
                (): CSharpClassFileTemplateTypeFunc;
                prototype: CSharpClassFileTemplate;
                new (classModel: Core.IClassModel, classTemplate: Core.IClassTemplate): CSharpClassFileTemplate;
                ctor: { new (classModel: Core.IClassModel, classTemplate: Core.IClassTemplate): CSharpClassFileTemplate; };
            }
            const CSharpClassFileTemplate: CSharpClassFileTemplateTypeFunc;

            // Nethereum.Generators.CQS.CSharpMultipleClassFileTemplate
            export interface CSharpMultipleClassFileTemplate extends MultipleClassFileTemplate {
            }
            export interface CSharpMultipleClassFileTemplateTypeFunc extends TypeFunction {
                (): CSharpMultipleClassFileTemplateTypeFunc;
                prototype: CSharpMultipleClassFileTemplate;
                new (classGenerators: System.Collections.Generic.IEnumerable$1<Core.IClassGenerator>, fileModel: Core.IFileModel): CSharpMultipleClassFileTemplate;
                ctor: { new (classGenerators: System.Collections.Generic.IEnumerable$1<Core.IClassGenerator>, fileModel: Core.IFileModel): CSharpMultipleClassFileTemplate; };
            }
            const CSharpMultipleClassFileTemplate: CSharpMultipleClassFileTemplateTypeFunc;

            // Nethereum.Generators.CQS.FileTemplate
            export interface FileTemplate extends System.Object {
                get_FileModel(): Core.IFileModel;
                GenerateNamespaceDependencies(): string;
                GenerateNamespaceDependency(namespaceName: string): string;
            }
            export interface FileTemplateTypeFunc extends TypeFunction {
                (): FileTemplateTypeFunc;
                prototype: FileTemplate;
            }
            const FileTemplate: FileTemplateTypeFunc;

            // Nethereum.Generators.CQS.FSharpClassFileTemplate
            export interface FSharpClassFileTemplate extends ClassFileTemplate {
            }
            export interface FSharpClassFileTemplateTypeFunc extends TypeFunction {
                (): FSharpClassFileTemplateTypeFunc;
                prototype: FSharpClassFileTemplate;
                new (classModel: Core.IClassModel, classTemplate: Core.IClassTemplate): FSharpClassFileTemplate;
                ctor: { new (classModel: Core.IClassModel, classTemplate: Core.IClassTemplate): FSharpClassFileTemplate; };
            }
            const FSharpClassFileTemplate: FSharpClassFileTemplateTypeFunc;

            // Nethereum.Generators.CQS.FSharpMultipleClassFileTemplate
            export interface FSharpMultipleClassFileTemplate extends MultipleClassFileTemplate {
            }
            export interface FSharpMultipleClassFileTemplateTypeFunc extends TypeFunction {
                (): FSharpMultipleClassFileTemplateTypeFunc;
                prototype: FSharpMultipleClassFileTemplate;
                new (classGenerators: System.Collections.Generic.IEnumerable$1<Core.IClassGenerator>, fileModel: Core.IFileModel): FSharpMultipleClassFileTemplate;
                ctor: { new (classGenerators: System.Collections.Generic.IEnumerable$1<Core.IClassGenerator>, fileModel: Core.IFileModel): FSharpMultipleClassFileTemplate; };
            }
            const FSharpMultipleClassFileTemplate: FSharpMultipleClassFileTemplateTypeFunc;

            // Nethereum.Generators.CQS.MultipleClassFileTemplate
            export interface MultipleClassFileTemplate extends FileTemplate {
                GenerateFile(): string;
            }
            export interface MultipleClassFileTemplateTypeFunc extends TypeFunction {
                (): MultipleClassFileTemplateTypeFunc;
                prototype: MultipleClassFileTemplate;
                new (classGenerators: System.Collections.Generic.IEnumerable$1<Core.IClassGenerator>, fileModel: Core.IFileModel): MultipleClassFileTemplate;
                ctor: { new (classGenerators: System.Collections.Generic.IEnumerable$1<Core.IClassGenerator>, fileModel: Core.IFileModel): MultipleClassFileTemplate; };
            }
            const MultipleClassFileTemplate: MultipleClassFileTemplateTypeFunc;

            // Nethereum.Generators.CQS.VbClassFileTemplate
            export interface VbClassFileTemplate extends ClassFileTemplate {
            }
            export interface VbClassFileTemplateTypeFunc extends TypeFunction {
                (): VbClassFileTemplateTypeFunc;
                prototype: VbClassFileTemplate;
                new (classModel: Core.IClassModel, classTemplate: Core.IClassTemplate): VbClassFileTemplate;
                ctor: { new (classModel: Core.IClassModel, classTemplate: Core.IClassTemplate): VbClassFileTemplate; };
            }
            const VbClassFileTemplate: VbClassFileTemplateTypeFunc;

            // Nethereum.Generators.CQS.VbMultipleClassFileTemplate
            export interface VbMultipleClassFileTemplate extends MultipleClassFileTemplate {
            }
            export interface VbMultipleClassFileTemplateTypeFunc extends TypeFunction {
                (): VbMultipleClassFileTemplateTypeFunc;
                prototype: VbMultipleClassFileTemplate;
                new (classGenerators: System.Collections.Generic.IEnumerable$1<Core.IClassGenerator>, fileModel: Core.IFileModel): VbMultipleClassFileTemplate;
                ctor: { new (classGenerators: System.Collections.Generic.IEnumerable$1<Core.IClassGenerator>, fileModel: Core.IFileModel): VbMultipleClassFileTemplate; };
            }
            const VbMultipleClassFileTemplate: VbMultipleClassFileTemplateTypeFunc;

            // Nethereum.Generators.CQS.ContractDeploymentCQSMessageGenerator
            export interface ContractDeploymentCQSMessageGenerator extends Core.ClassGeneratorBase$2<ClassTemplateBase$1<ContractDeploymentCQSMessageModel>, ContractDeploymentCQSMessageModel>, Core.IFileGenerator, Core.IGenerator, Core.IClassGenerator {
                InitialiseTemplate(codeGenLanguage: Core.CodeGenLanguage): void;
            }
            export interface ContractDeploymentCQSMessageGeneratorTypeFunc extends TypeFunction {
                (): ContractDeploymentCQSMessageGeneratorTypeFunc;
                prototype: ContractDeploymentCQSMessageGenerator;
                new (abi: Model.ConstructorABI, namespaceName: string, byteCode: string, contractName: string, codeGenLanguage: Core.CodeGenLanguage): ContractDeploymentCQSMessageGenerator;
                ctor: { new (abi: Model.ConstructorABI, namespaceName: string, byteCode: string, contractName: string, codeGenLanguage: Core.CodeGenLanguage): ContractDeploymentCQSMessageGenerator; };
            }
            const ContractDeploymentCQSMessageGenerator: ContractDeploymentCQSMessageGeneratorTypeFunc;

            // Nethereum.Generators.CQS.ContractDeploymentCQSMessageModel
            export interface ContractDeploymentCQSMessageModel extends Core.TypeMessageModel, Core.IClassModel, Core.IFileModel {
                get_ConstructorABI(): Model.ConstructorABI;
                get_ByteCode(): string;
            }
            export interface ContractDeploymentCQSMessageModelTypeFunc extends TypeFunction {
                (): ContractDeploymentCQSMessageModelTypeFunc;
                prototype: ContractDeploymentCQSMessageModel;
                new (constructorABI: Model.ConstructorABI, namespace: string, byteCode: string, contractName: string): ContractDeploymentCQSMessageModel;
                ctor: { new (constructorABI: Model.ConstructorABI, namespace: string, byteCode: string, contractName: string): ContractDeploymentCQSMessageModel; };
            }
            const ContractDeploymentCQSMessageModel: ContractDeploymentCQSMessageModelTypeFunc;

            // Nethereum.Generators.CQS.FunctionCQSMessageGenerator
            export interface FunctionCQSMessageGenerator extends Core.ClassGeneratorBase$2<ClassTemplateBase$1<FunctionCQSMessageModel>, FunctionCQSMessageModel>, Core.IFileGenerator, Core.IGenerator, Core.IClassGenerator {
                get_FunctionABI(): Model.FunctionABI;
            }
            export interface FunctionCQSMessageGeneratorTypeFunc extends TypeFunction {
                (): FunctionCQSMessageGeneratorTypeFunc;
                prototype: FunctionCQSMessageGenerator;
                new (functionABI: Model.FunctionABI, namespace: string, namespaceFunctionOutput: string, codeGenLanguage: Core.CodeGenLanguage): FunctionCQSMessageGenerator;
                ctor: { new (functionABI: Model.FunctionABI, namespace: string, namespaceFunctionOutput: string, codeGenLanguage: Core.CodeGenLanguage): FunctionCQSMessageGenerator; };
            }
            const FunctionCQSMessageGenerator: FunctionCQSMessageGeneratorTypeFunc;

            // Nethereum.Generators.CQS.FunctionCQSMessageModel
            export interface FunctionCQSMessageModel extends Core.TypeMessageModel, Core.IClassModel, Core.IFileModel {
                get_FunctionABI(): Model.FunctionABI;
            }
            export interface FunctionCQSMessageModelTypeFunc extends TypeFunction {
                (): FunctionCQSMessageModelTypeFunc;
                prototype: FunctionCQSMessageModel;
                new (functionABI: Model.FunctionABI, namespace: string): FunctionCQSMessageModel;
                ctor: { new (functionABI: Model.FunctionABI, namespace: string): FunctionCQSMessageModel; };
            }
            const FunctionCQSMessageModel: FunctionCQSMessageModelTypeFunc;

            // Nethereum.Generators.CQS.ContractDeploymentCQSMessageCSharpTemplate
            export interface ContractDeploymentCQSMessageCSharpTemplate extends ClassTemplateBase$1<ContractDeploymentCQSMessageModel>, Core.IClassTemplate {
                GetPartialMainClass(): string;
            }
            export interface ContractDeploymentCQSMessageCSharpTemplateTypeFunc extends TypeFunction {
                (): ContractDeploymentCQSMessageCSharpTemplateTypeFunc;
                prototype: ContractDeploymentCQSMessageCSharpTemplate;
                new (model: ContractDeploymentCQSMessageModel): ContractDeploymentCQSMessageCSharpTemplate;
                ctor: { new (model: ContractDeploymentCQSMessageModel): ContractDeploymentCQSMessageCSharpTemplate; };
            }
            const ContractDeploymentCQSMessageCSharpTemplate: ContractDeploymentCQSMessageCSharpTemplateTypeFunc;

            // Nethereum.Generators.CQS.FunctionCQSMessageCSharpTemplate
            export interface FunctionCQSMessageCSharpTemplate extends ClassTemplateBase$1<FunctionCQSMessageModel>, Core.IClassTemplate {
                GetPartialMainClass(): string;
            }
            export interface FunctionCQSMessageCSharpTemplateTypeFunc extends TypeFunction {
                (): FunctionCQSMessageCSharpTemplateTypeFunc;
                prototype: FunctionCQSMessageCSharpTemplate;
                new (model: FunctionCQSMessageModel, functionOutputDTOModel: DTOs.FunctionOutputDTOModel, functionABIModel: Core.FunctionABIModel): FunctionCQSMessageCSharpTemplate;
                ctor: { new (model: FunctionCQSMessageModel, functionOutputDTOModel: DTOs.FunctionOutputDTOModel, functionABIModel: Core.FunctionABIModel): FunctionCQSMessageCSharpTemplate; };
            }
            const FunctionCQSMessageCSharpTemplate: FunctionCQSMessageCSharpTemplateTypeFunc;

            // Nethereum.Generators.CQS.ContractDeploymentCQSMessageFSharpTemplate
            export interface ContractDeploymentCQSMessageFSharpTemplate extends ClassTemplateBase$1<ContractDeploymentCQSMessageModel>, Core.IClassTemplate {
            }
            export interface ContractDeploymentCQSMessageFSharpTemplateTypeFunc extends TypeFunction {
                (): ContractDeploymentCQSMessageFSharpTemplateTypeFunc;
                prototype: ContractDeploymentCQSMessageFSharpTemplate;
                new (model: ContractDeploymentCQSMessageModel): ContractDeploymentCQSMessageFSharpTemplate;
                ctor: { new (model: ContractDeploymentCQSMessageModel): ContractDeploymentCQSMessageFSharpTemplate; };
            }
            const ContractDeploymentCQSMessageFSharpTemplate: ContractDeploymentCQSMessageFSharpTemplateTypeFunc;

            // Nethereum.Generators.CQS.FunctionCQSMessageFSharpTemplate
            export interface FunctionCQSMessageFSharpTemplate extends ClassTemplateBase$1<FunctionCQSMessageModel>, Core.IClassTemplate {
            }
            export interface FunctionCQSMessageFSharpTemplateTypeFunc extends TypeFunction {
                (): FunctionCQSMessageFSharpTemplateTypeFunc;
                prototype: FunctionCQSMessageFSharpTemplate;
                new (model: FunctionCQSMessageModel, functionOutputDTOModel: DTOs.FunctionOutputDTOModel, functionABIModel: Core.FunctionABIModel): FunctionCQSMessageFSharpTemplate;
                ctor: { new (model: FunctionCQSMessageModel, functionOutputDTOModel: DTOs.FunctionOutputDTOModel, functionABIModel: Core.FunctionABIModel): FunctionCQSMessageFSharpTemplate; };
            }
            const FunctionCQSMessageFSharpTemplate: FunctionCQSMessageFSharpTemplateTypeFunc;

            // Nethereum.Generators.CQS.ContractDeploymentCQSMessageVbTemplate
            export interface ContractDeploymentCQSMessageVbTemplate extends ClassTemplateBase$1<ContractDeploymentCQSMessageModel>, Core.IClassTemplate {
                GetPartialMainClass(): string;
            }
            export interface ContractDeploymentCQSMessageVbTemplateTypeFunc extends TypeFunction {
                (): ContractDeploymentCQSMessageVbTemplateTypeFunc;
                prototype: ContractDeploymentCQSMessageVbTemplate;
                new (model: ContractDeploymentCQSMessageModel): ContractDeploymentCQSMessageVbTemplate;
                ctor: { new (model: ContractDeploymentCQSMessageModel): ContractDeploymentCQSMessageVbTemplate; };
            }
            const ContractDeploymentCQSMessageVbTemplate: ContractDeploymentCQSMessageVbTemplateTypeFunc;

            // Nethereum.Generators.CQS.FunctionCQSMessageVbTemplate
            export interface FunctionCQSMessageVbTemplate extends ClassTemplateBase$1<FunctionCQSMessageModel>, Core.IClassTemplate {
                GetPartialMainClass(): string;
            }
            export interface FunctionCQSMessageVbTemplateTypeFunc extends TypeFunction {
                (): FunctionCQSMessageVbTemplateTypeFunc;
                prototype: FunctionCQSMessageVbTemplate;
                new (model: FunctionCQSMessageModel, functionOutputDTOModel: DTOs.FunctionOutputDTOModel, functionABIModel: Core.FunctionABIModel): FunctionCQSMessageVbTemplate;
                ctor: { new (model: FunctionCQSMessageModel, functionOutputDTOModel: DTOs.FunctionOutputDTOModel, functionABIModel: Core.FunctionABIModel): FunctionCQSMessageVbTemplate; };
            }
            const FunctionCQSMessageVbTemplate: FunctionCQSMessageVbTemplateTypeFunc;
        }
        module DTOs {
            // Nethereum.Generators.DTOs.ErrorDTOGenerator
            export interface ErrorDTOGenerator extends Core.ClassGeneratorBase$2<CQS.ClassTemplateBase$1<ErrorDTOModel>, ErrorDTOModel>, Core.IFileGenerator, Core.IGenerator, Core.IClassGenerator {
                InitialiseTemplate(codeGenLanguage: Core.CodeGenLanguage): void;
            }
            export interface ErrorDTOGeneratorTypeFunc extends TypeFunction {
                (): ErrorDTOGeneratorTypeFunc;
                prototype: ErrorDTOGenerator;
                new (abi: Model.ErrorABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage): ErrorDTOGenerator;
                ctor: { new (abi: Model.ErrorABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage): ErrorDTOGenerator; };
            }
            const ErrorDTOGenerator: ErrorDTOGeneratorTypeFunc;

            // Nethereum.Generators.DTOs.ErrorDTOModel
            export interface ErrorDTOModel extends Core.TypeMessageModel, Core.IClassModel, Core.IFileModel {
                get_ErrorABI(): Model.ErrorABI;
                HasParameters(): boolean;
            }
            export interface ErrorDTOModelTypeFunc extends TypeFunction {
                (): ErrorDTOModelTypeFunc;
                prototype: ErrorDTOModel;
                new (errorABI: Model.ErrorABI, namespace: string): ErrorDTOModel;
                ctor: { new (errorABI: Model.ErrorABI, namespace: string): ErrorDTOModel; };
            }
            const ErrorDTOModel: ErrorDTOModelTypeFunc;

            // Nethereum.Generators.DTOs.EventDTOGenerator
            export interface EventDTOGenerator extends Core.ClassGeneratorBase$2<CQS.ClassTemplateBase$1<EventDTOModel>, EventDTOModel>, Core.IFileGenerator, Core.IGenerator, Core.IClassGenerator {
                InitialiseTemplate(codeGenLanguage: Core.CodeGenLanguage): void;
            }
            export interface EventDTOGeneratorTypeFunc extends TypeFunction {
                (): EventDTOGeneratorTypeFunc;
                prototype: EventDTOGenerator;
                new (abi: Model.EventABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage): EventDTOGenerator;
                ctor: { new (abi: Model.EventABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage): EventDTOGenerator; };
            }
            const EventDTOGenerator: EventDTOGeneratorTypeFunc;

            // Nethereum.Generators.DTOs.EventDTOModel
            export interface EventDTOModel extends Core.TypeMessageModel, Core.IClassModel, Core.IFileModel {
                get_EventABI(): Model.EventABI;
                CanGenerateOutputDTO(): boolean;
            }
            export interface EventDTOModelTypeFunc extends TypeFunction {
                (): EventDTOModelTypeFunc;
                prototype: EventDTOModel;
                new (eventABI: Model.EventABI, namespace: string): EventDTOModel;
                ctor: { new (eventABI: Model.EventABI, namespace: string): EventDTOModel; };
            }
            const EventDTOModel: EventDTOModelTypeFunc;

            // Nethereum.Generators.DTOs.FunctionOutputDTOGenerator
            export interface FunctionOutputDTOGenerator extends Core.ClassGeneratorBase$2<CQS.ClassTemplateBase$1<FunctionOutputDTOModel>, FunctionOutputDTOModel>, Core.IFileGenerator, Core.IGenerator, Core.IClassGenerator {
                InitialiseTemplate(codeGenLanguage: Core.CodeGenLanguage): void;
            }
            export interface FunctionOutputDTOGeneratorTypeFunc extends TypeFunction {
                (): FunctionOutputDTOGeneratorTypeFunc;
                prototype: FunctionOutputDTOGenerator;
                new (functionABI: Model.FunctionABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage): FunctionOutputDTOGenerator;
                ctor: { new (functionABI: Model.FunctionABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage): FunctionOutputDTOGenerator; };
            }
            const FunctionOutputDTOGenerator: FunctionOutputDTOGeneratorTypeFunc;

            // Nethereum.Generators.DTOs.FunctionOutputDTOModel
            export interface FunctionOutputDTOModel extends Core.TypeMessageModel, Core.IClassModel, Core.IFileModel {
                get_FunctionABI(): Model.FunctionABI;
                CanGenerateOutputDTO(): boolean;
            }
            export interface FunctionOutputDTOModelTypeFunc extends TypeFunction {
                (): FunctionOutputDTOModelTypeFunc;
                prototype: FunctionOutputDTOModel;
                new (functionABI: Model.FunctionABI, namespace: string): FunctionOutputDTOModel;
                ctor: { new (functionABI: Model.FunctionABI, namespace: string): FunctionOutputDTOModel; };
            }
            const FunctionOutputDTOModel: FunctionOutputDTOModelTypeFunc;

            // Nethereum.Generators.DTOs.StructTypeGenerator
            export interface StructTypeGenerator extends Core.ClassGeneratorBase$2<CQS.ClassTemplateBase$1<StructTypeModel>, StructTypeModel>, Core.IFileGenerator, Core.IGenerator, Core.IClassGenerator {
                InitialiseTemplate(codeGenLanguage: Core.CodeGenLanguage): void;
            }
            export interface StructTypeGeneratorTypeFunc extends TypeFunction {
                (): StructTypeGeneratorTypeFunc;
                prototype: StructTypeGenerator;
                new (structTypeABI: Model.StructABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage): StructTypeGenerator;
                ctor: { new (structTypeABI: Model.StructABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage): StructTypeGenerator; };
            }
            const StructTypeGenerator: StructTypeGeneratorTypeFunc;

            // Nethereum.Generators.DTOs.StructTypeModel
            export interface StructTypeModel extends Core.TypeMessageModel, Core.IClassModel, Core.IFileModel {
                get_StructTypeABI(): Model.StructABI;
            }
            export interface StructTypeModelTypeFunc extends TypeFunction {
                (): StructTypeModelTypeFunc;
                prototype: StructTypeModel;
                new (structTypeABI: Model.StructABI, namespace: string): StructTypeModel;
                ctor: { new (structTypeABI: Model.StructABI, namespace: string): StructTypeModel; };
            }
            const StructTypeModel: StructTypeModelTypeFunc;

            // Nethereum.Generators.DTOs.ErrorDTOCSharpTemplate
            export interface ErrorDTOCSharpTemplate extends CQS.ClassTemplateBase$1<ErrorDTOModel>, Core.IClassTemplate {
                GetPartialMainClass(): string;
            }
            export interface ErrorDTOCSharpTemplateTypeFunc extends TypeFunction {
                (): ErrorDTOCSharpTemplateTypeFunc;
                prototype: ErrorDTOCSharpTemplate;
                new (errorDTOModel: ErrorDTOModel): ErrorDTOCSharpTemplate;
                ctor: { new (errorDTOModel: ErrorDTOModel): ErrorDTOCSharpTemplate; };
            }
            const ErrorDTOCSharpTemplate: ErrorDTOCSharpTemplateTypeFunc;

            // Nethereum.Generators.DTOs.EventDTOCSharpTemplate
            export interface EventDTOCSharpTemplate extends CQS.ClassTemplateBase$1<EventDTOModel>, Core.IClassTemplate {
                GetPartialMainClass(): string;
            }
            export interface EventDTOCSharpTemplateTypeFunc extends TypeFunction {
                (): EventDTOCSharpTemplateTypeFunc;
                prototype: EventDTOCSharpTemplate;
                new (eventDTOModel: EventDTOModel): EventDTOCSharpTemplate;
                ctor: { new (eventDTOModel: EventDTOModel): EventDTOCSharpTemplate; };
            }
            const EventDTOCSharpTemplate: EventDTOCSharpTemplateTypeFunc;

            // Nethereum.Generators.DTOs.FunctionOutputDTOCSharpTemplate
            export interface FunctionOutputDTOCSharpTemplate extends CQS.ClassTemplateBase$1<FunctionOutputDTOModel>, Core.IClassTemplate {
                GetPartialMainClass(): string;
            }
            export interface FunctionOutputDTOCSharpTemplateTypeFunc extends TypeFunction {
                (): FunctionOutputDTOCSharpTemplateTypeFunc;
                prototype: FunctionOutputDTOCSharpTemplate;
                new (model: FunctionOutputDTOModel): FunctionOutputDTOCSharpTemplate;
                ctor: { new (model: FunctionOutputDTOModel): FunctionOutputDTOCSharpTemplate; };
            }
            const FunctionOutputDTOCSharpTemplate: FunctionOutputDTOCSharpTemplateTypeFunc;

            // Nethereum.Generators.DTOs.ParameterABIEventDTOCSharpTemplate
            export interface ParameterABIEventDTOCSharpTemplate extends System.Object {
                GenerateAllProperties(parameters: Model.ParameterABI[]): string;
                GenerateProperty(parameter: Model.ParameterABI): string;
            }
            export interface ParameterABIEventDTOCSharpTemplateTypeFunc extends TypeFunction {
                (): ParameterABIEventDTOCSharpTemplateTypeFunc;
                prototype: ParameterABIEventDTOCSharpTemplate;
                new (): ParameterABIEventDTOCSharpTemplate;
                ctor: { new (): ParameterABIEventDTOCSharpTemplate; };
            }
            const ParameterABIEventDTOCSharpTemplate: ParameterABIEventDTOCSharpTemplateTypeFunc;

            // Nethereum.Generators.DTOs.ParameterABIFunctionDTOCSharpTemplate
            export interface ParameterABIFunctionDTOCSharpTemplate extends System.Object {
                GenerateAllProperties(parameters: Model.ParameterABI[]): string;
                GenerateProperty(parameter: Model.ParameterABI): string;
                GenerateAllFunctionParameters(parameters: Model.ParameterABI[]): string;
                GenerateFunctionParameter(parameter: Model.ParameterABI): string;
                GenerateAssigmentFunctionParametersToProperties(parameters: Model.ParameterABI[], objectName: string, spacing: string): string;
                GenerateAssigmentFunctionParameterToProperty(parameter: Model.ParameterABI, objectName: string, spacing: string): string;
            }
            export interface ParameterABIFunctionDTOCSharpTemplateTypeFunc extends TypeFunction {
                (): ParameterABIFunctionDTOCSharpTemplateTypeFunc;
                prototype: ParameterABIFunctionDTOCSharpTemplate;
                new (): ParameterABIFunctionDTOCSharpTemplate;
                ctor: { new (): ParameterABIFunctionDTOCSharpTemplate; };
            }
            const ParameterABIFunctionDTOCSharpTemplate: ParameterABIFunctionDTOCSharpTemplateTypeFunc;

            // Nethereum.Generators.DTOs.StructTypeCSharpTemplate
            export interface StructTypeCSharpTemplate extends CQS.ClassTemplateBase$1<StructTypeModel>, Core.IClassTemplate {
                GetPartialMainClass(): string;
            }
            export interface StructTypeCSharpTemplateTypeFunc extends TypeFunction {
                (): StructTypeCSharpTemplateTypeFunc;
                prototype: StructTypeCSharpTemplate;
                new (model: StructTypeModel): StructTypeCSharpTemplate;
                ctor: { new (model: StructTypeModel): StructTypeCSharpTemplate; };
            }
            const StructTypeCSharpTemplate: StructTypeCSharpTemplateTypeFunc;

            // Nethereum.Generators.DTOs.ErrorDTOFSharpTemplate
            export interface ErrorDTOFSharpTemplate extends CQS.ClassTemplateBase$1<ErrorDTOModel>, Core.IClassTemplate {
            }
            export interface ErrorDTOFSharpTemplateTypeFunc extends TypeFunction {
                (): ErrorDTOFSharpTemplateTypeFunc;
                prototype: ErrorDTOFSharpTemplate;
                new (errorDTOModel: ErrorDTOModel): ErrorDTOFSharpTemplate;
                ctor: { new (errorDTOModel: ErrorDTOModel): ErrorDTOFSharpTemplate; };
            }
            const ErrorDTOFSharpTemplate: ErrorDTOFSharpTemplateTypeFunc;

            // Nethereum.Generators.DTOs.EventDTOFSharpTemplate
            export interface EventDTOFSharpTemplate extends CQS.ClassTemplateBase$1<EventDTOModel>, Core.IClassTemplate {
            }
            export interface EventDTOFSharpTemplateTypeFunc extends TypeFunction {
                (): EventDTOFSharpTemplateTypeFunc;
                prototype: EventDTOFSharpTemplate;
                new (eventDTOModel: EventDTOModel): EventDTOFSharpTemplate;
                ctor: { new (eventDTOModel: EventDTOModel): EventDTOFSharpTemplate; };
            }
            const EventDTOFSharpTemplate: EventDTOFSharpTemplateTypeFunc;

            // Nethereum.Generators.DTOs.FunctionOutputDTOFSharpTemplate
            export interface FunctionOutputDTOFSharpTemplate extends CQS.ClassTemplateBase$1<FunctionOutputDTOModel>, Core.IClassTemplate {
            }
            export interface FunctionOutputDTOFSharpTemplateTypeFunc extends TypeFunction {
                (): FunctionOutputDTOFSharpTemplateTypeFunc;
                prototype: FunctionOutputDTOFSharpTemplate;
                new (model: FunctionOutputDTOModel): FunctionOutputDTOFSharpTemplate;
                ctor: { new (model: FunctionOutputDTOModel): FunctionOutputDTOFSharpTemplate; };
            }
            const FunctionOutputDTOFSharpTemplate: FunctionOutputDTOFSharpTemplateTypeFunc;

            // Nethereum.Generators.DTOs.ParameterABIEventDTOFSharpTemplate
            export interface ParameterABIEventDTOFSharpTemplate extends System.Object {
                GenerateAllProperties(parameters: Model.ParameterABI[]): string;
                GenerateProperty(parameter: Model.ParameterABI): string;
            }
            export interface ParameterABIEventDTOFSharpTemplateTypeFunc extends TypeFunction {
                (): ParameterABIEventDTOFSharpTemplateTypeFunc;
                prototype: ParameterABIEventDTOFSharpTemplate;
                new (): ParameterABIEventDTOFSharpTemplate;
                ctor: { new (): ParameterABIEventDTOFSharpTemplate; };
            }
            const ParameterABIEventDTOFSharpTemplate: ParameterABIEventDTOFSharpTemplateTypeFunc;

            // Nethereum.Generators.DTOs.ParameterABIFunctionDTOFSharpTemplate
            export interface ParameterABIFunctionDTOFSharpTemplate extends System.Object {
                GenerateAllProperties(parameters: Model.ParameterABI[]): string;
                GenerateProperty(parameter: Model.ParameterABI): string;
                GenerateAllFunctionParameters(parameters: Model.ParameterABI[]): string;
                GenerateFunctionParameter(parameter: Model.ParameterABI): string;
                GenerateAssigmentFunctionParametersToProperties(parameters: Model.ParameterABI[], objectName: string, spacing: string): string;
                GenerateAssigmentFunctionParameterToProperty(parameter: Model.ParameterABI, objectName: string, spacing: string): string;
            }
            export interface ParameterABIFunctionDTOFSharpTemplateTypeFunc extends TypeFunction {
                (): ParameterABIFunctionDTOFSharpTemplateTypeFunc;
                prototype: ParameterABIFunctionDTOFSharpTemplate;
                new (): ParameterABIFunctionDTOFSharpTemplate;
                ctor: { new (): ParameterABIFunctionDTOFSharpTemplate; };
            }
            const ParameterABIFunctionDTOFSharpTemplate: ParameterABIFunctionDTOFSharpTemplateTypeFunc;

            // Nethereum.Generators.DTOs.StructTypeFSharpTemplate
            export interface StructTypeFSharpTemplate extends CQS.ClassTemplateBase$1<StructTypeModel>, Core.IClassTemplate {
            }
            export interface StructTypeFSharpTemplateTypeFunc extends TypeFunction {
                (): StructTypeFSharpTemplateTypeFunc;
                prototype: StructTypeFSharpTemplate;
                new (model: StructTypeModel): StructTypeFSharpTemplate;
                ctor: { new (model: StructTypeModel): StructTypeFSharpTemplate; };
            }
            const StructTypeFSharpTemplate: StructTypeFSharpTemplateTypeFunc;

            // Nethereum.Generators.DTOs.ErrorDTOVbTemplate
            export interface ErrorDTOVbTemplate extends CQS.ClassTemplateBase$1<ErrorDTOModel>, Core.IClassTemplate {
                GetPartialMainClass(): string;
            }
            export interface ErrorDTOVbTemplateTypeFunc extends TypeFunction {
                (): ErrorDTOVbTemplateTypeFunc;
                prototype: ErrorDTOVbTemplate;
                new (errorDTOModel: ErrorDTOModel): ErrorDTOVbTemplate;
                ctor: { new (errorDTOModel: ErrorDTOModel): ErrorDTOVbTemplate; };
            }
            const ErrorDTOVbTemplate: ErrorDTOVbTemplateTypeFunc;

            // Nethereum.Generators.DTOs.EventDTOVbTemplate
            export interface EventDTOVbTemplate extends CQS.ClassTemplateBase$1<EventDTOModel>, Core.IClassTemplate {
                GetPartialMainClass(): string;
            }
            export interface EventDTOVbTemplateTypeFunc extends TypeFunction {
                (): EventDTOVbTemplateTypeFunc;
                prototype: EventDTOVbTemplate;
                new (eventDTOModel: EventDTOModel): EventDTOVbTemplate;
                ctor: { new (eventDTOModel: EventDTOModel): EventDTOVbTemplate; };
            }
            const EventDTOVbTemplate: EventDTOVbTemplateTypeFunc;

            // Nethereum.Generators.DTOs.FunctionOutputDTOVbTemplate
            export interface FunctionOutputDTOVbTemplate extends CQS.ClassTemplateBase$1<FunctionOutputDTOModel>, Core.IClassTemplate {
                GetPartialMainClass(): string;
            }
            export interface FunctionOutputDTOVbTemplateTypeFunc extends TypeFunction {
                (): FunctionOutputDTOVbTemplateTypeFunc;
                prototype: FunctionOutputDTOVbTemplate;
                new (model: FunctionOutputDTOModel): FunctionOutputDTOVbTemplate;
                ctor: { new (model: FunctionOutputDTOModel): FunctionOutputDTOVbTemplate; };
            }
            const FunctionOutputDTOVbTemplate: FunctionOutputDTOVbTemplateTypeFunc;

            // Nethereum.Generators.DTOs.ParameterABIEventDTOVbTemplate
            export interface ParameterABIEventDTOVbTemplate extends System.Object {
                GenerateAllProperties(parameters: Model.ParameterABI[]): string;
                GenerateProperty(parameter: Model.ParameterABI): string;
            }
            export interface ParameterABIEventDTOVbTemplateTypeFunc extends TypeFunction {
                (): ParameterABIEventDTOVbTemplateTypeFunc;
                prototype: ParameterABIEventDTOVbTemplate;
                new (): ParameterABIEventDTOVbTemplate;
                ctor: { new (): ParameterABIEventDTOVbTemplate; };
            }
            const ParameterABIEventDTOVbTemplate: ParameterABIEventDTOVbTemplateTypeFunc;

            // Nethereum.Generators.DTOs.ParameterABIFunctionDTOVbTemplate
            export interface ParameterABIFunctionDTOVbTemplate extends System.Object {
                GenerateAllProperties(parameters: Model.ParameterABI[]): string;
                GenerateProperty(parameter: Model.ParameterABI): string;
                GenerateAllFunctionParameters(parameters: Model.ParameterABI[]): string;
                GenerateFunctionParameter(parameter: Model.ParameterABI): string;
                GenerateAssigmentFunctionParametersToProperties(parameters: Model.ParameterABI[], objectName: string, spacing: string): string;
                GenerateAssigmentFunctionParameterToProperty(parameter: Model.ParameterABI, objectName: string, spacing: string): string;
            }
            export interface ParameterABIFunctionDTOVbTemplateTypeFunc extends TypeFunction {
                (): ParameterABIFunctionDTOVbTemplateTypeFunc;
                prototype: ParameterABIFunctionDTOVbTemplate;
                new (): ParameterABIFunctionDTOVbTemplate;
                ctor: { new (): ParameterABIFunctionDTOVbTemplate; };
            }
            const ParameterABIFunctionDTOVbTemplate: ParameterABIFunctionDTOVbTemplateTypeFunc;

            // Nethereum.Generators.DTOs.StructTypeVbTemplate
            export interface StructTypeVbTemplate extends CQS.ClassTemplateBase$1<StructTypeModel>, Core.IClassTemplate {
                GetPartialMainClass(): string;
            }
            export interface StructTypeVbTemplateTypeFunc extends TypeFunction {
                (): StructTypeVbTemplateTypeFunc;
                prototype: StructTypeVbTemplate;
                new (model: StructTypeModel): StructTypeVbTemplate;
                ctor: { new (model: StructTypeModel): StructTypeVbTemplate; };
            }
            const StructTypeVbTemplate: StructTypeVbTemplateTypeFunc;
        }
        module Unity {
            // Nethereum.Generators.Unity.UnityContractFactoryGenerator
            export interface UnityContractFactoryGenerator extends Core.ClassGeneratorBase$2<CQS.ClassTemplateBase$1<UnityContractFactoryModel>, UnityContractFactoryModel>, Core.IFileGenerator, Core.IGenerator, Core.IClassGenerator {
                get_ContractABI(): Model.ContractABI;
                InitialiseTemplate(codeGenLanguage: Core.CodeGenLanguage): void;
            }
            export interface UnityContractFactoryGeneratorTypeFunc extends TypeFunction {
                (): UnityContractFactoryGeneratorTypeFunc;
                prototype: UnityContractFactoryGenerator;
                new (contractABI: Model.ContractABI, contractName: string, byteCode: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string, codeGenLanguage: Core.CodeGenLanguage): UnityContractFactoryGenerator;
                ctor: { new (contractABI: Model.ContractABI, contractName: string, byteCode: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string, codeGenLanguage: Core.CodeGenLanguage): UnityContractFactoryGenerator; };
            }
            const UnityContractFactoryGenerator: UnityContractFactoryGeneratorTypeFunc;

            // Nethereum.Generators.Unity.UnityContractFactoryModel
            export interface UnityContractFactoryModel extends Core.TypeMessageModel, Core.IClassModel, Core.IFileModel {
                get_ContractABI(): Model.ContractABI;
                get_CQSNamespace(): string;
                get_FunctionOutputNamespace(): string;
                get_ContractDeploymentCQSMessageModel(): CQS.ContractDeploymentCQSMessageModel;
            }
            export interface UnityContractFactoryModelTypeFunc extends TypeFunction {
                (): UnityContractFactoryModelTypeFunc;
                prototype: UnityContractFactoryModel;
                new (contractABI: Model.ContractABI, contractName: string, byteCode: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string): UnityContractFactoryModel;
                ctor: { new (contractABI: Model.ContractABI, contractName: string, byteCode: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string): UnityContractFactoryModel; };
            }
            const UnityContractFactoryModel: UnityContractFactoryModelTypeFunc;

            // Nethereum.Generators.Unity.UnityRequestsGenerator
            export interface UnityRequestsGenerator extends Core.ClassGeneratorBase$2<CQS.ClassTemplateBase$1<UnityRequestsModel>, UnityRequestsModel>, Core.IFileGenerator, Core.IGenerator, Core.IClassGenerator {
                get_ContractABI(): Model.ContractABI;
                InitialiseTemplate(codeGenLanguage: Core.CodeGenLanguage): void;
            }
            export interface UnityRequestsGeneratorTypeFunc extends TypeFunction {
                (): UnityRequestsGeneratorTypeFunc;
                prototype: UnityRequestsGenerator;
                new (contractABI: Model.ContractABI, contractName: string, byteCode: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string, codeGenLanguage: Core.CodeGenLanguage): UnityRequestsGenerator;
                ctor: { new (contractABI: Model.ContractABI, contractName: string, byteCode: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string, codeGenLanguage: Core.CodeGenLanguage): UnityRequestsGenerator; };
            }
            const UnityRequestsGenerator: UnityRequestsGeneratorTypeFunc;

            // Nethereum.Generators.Unity.UnityRequestsModel
            export interface UnityRequestsModel extends Core.TypeMessageModel, Core.IClassModel, Core.IFileModel {
                get_ContractABI(): Model.ContractABI;
                get_CQSNamespace(): string;
                get_FunctionOutputNamespace(): string;
                get_ContractDeploymentCQSMessageModel(): CQS.ContractDeploymentCQSMessageModel;
            }
            export interface UnityRequestsModelTypeFunc extends TypeFunction {
                (): UnityRequestsModelTypeFunc;
                prototype: UnityRequestsModel;
                new (contractABI: Model.ContractABI, contractName: string, byteCode: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string): UnityRequestsModel;
                ctor: { new (contractABI: Model.ContractABI, contractName: string, byteCode: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string): UnityRequestsModel; };
            }
            const UnityRequestsModel: UnityRequestsModelTypeFunc;
            module CSharp {
                // Nethereum.Generators.Unity.CSharp.UnityContractFactoryCSharpTemplate
                export interface UnityContractFactoryCSharpTemplate extends CQS.ClassTemplateBase$1<UnityContractFactoryModel>, Core.IClassTemplate {
                    GenerateMethod(functionABI: Model.FunctionABI): string;
                }
                export interface UnityContractFactoryCSharpTemplateTypeFunc extends TypeFunction {
                    (): UnityContractFactoryCSharpTemplateTypeFunc;
                    prototype: UnityContractFactoryCSharpTemplate;
                    new (model: UnityContractFactoryModel): UnityContractFactoryCSharpTemplate;
                    ctor: { new (model: UnityContractFactoryModel): UnityContractFactoryCSharpTemplate; };
                }
                const UnityContractFactoryCSharpTemplate: UnityContractFactoryCSharpTemplateTypeFunc;

                // Nethereum.Generators.Unity.CSharp.UnityFunctionRequestsCsharpTemplates
                export interface UnityFunctionRequestsCsharpTemplates extends CQS.ClassTemplateBase$1<UnityRequestsModel>, Core.IClassTemplate {
                    GenerateSingleClass(functionABI: Model.FunctionABI): string;
                }
                export interface UnityFunctionRequestsCsharpTemplatesTypeFunc extends TypeFunction {
                    (): UnityFunctionRequestsCsharpTemplatesTypeFunc;
                    prototype: UnityFunctionRequestsCsharpTemplates;
                    new (model: UnityRequestsModel): UnityFunctionRequestsCsharpTemplates;
                    ctor: { new (model: UnityRequestsModel): UnityFunctionRequestsCsharpTemplates; };
                }
                const UnityFunctionRequestsCsharpTemplates: UnityFunctionRequestsCsharpTemplatesTypeFunc;
            }
        }
        module XUnit {
            // Nethereum.Generators.XUnit.SimpleTestGenerator
            export interface SimpleTestGenerator extends Core.ClassGeneratorBase$2<CQS.ClassTemplateBase$1<SimpleTestModel>, SimpleTestModel>, Core.IFileGenerator, Core.IGenerator, Core.IClassGenerator {
                get_ContractABI(): Model.ContractABI;
                InitialiseTemplate(codeGenLanguage: Core.CodeGenLanguage): void;
            }
            export interface SimpleTestGeneratorTypeFunc extends TypeFunction {
                (): SimpleTestGeneratorTypeFunc;
                prototype: SimpleTestGenerator;
                new (contractABI: Model.ContractABI, contractName: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string, codeGenLanguage: Core.CodeGenLanguage): SimpleTestGenerator;
                ctor: { new (contractABI: Model.ContractABI, contractName: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string, codeGenLanguage: Core.CodeGenLanguage): SimpleTestGenerator; };
            }
            const SimpleTestGenerator: SimpleTestGeneratorTypeFunc;

            // Nethereum.Generators.XUnit.SimpleTestModel
            export interface SimpleTestModel extends Core.TypeMessageModel, Core.IClassModel, Core.IFileModel {
                get_ContractABI(): Model.ContractABI;
                get_CQSNamespace(): string;
                get_FunctionOutputNamespace(): string;
            }
            export interface SimpleTestModelTypeFunc extends TypeFunction {
                (): SimpleTestModelTypeFunc;
                prototype: SimpleTestModel;
                new (contractABI: Model.ContractABI, contractName: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string): SimpleTestModel;
                ctor: { new (contractABI: Model.ContractABI, contractName: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string): SimpleTestModel; };
            }
            const SimpleTestModel: SimpleTestModelTypeFunc;

            // Nethereum.Generators.XUnit.SimpleTestCSharpTemplate
            export interface SimpleTestCSharpTemplate extends CQS.ClassTemplateBase$1<SimpleTestModel>, Core.IClassTemplate {
            }
            export interface SimpleTestCSharpTemplateTypeFunc extends TypeFunction {
                (): SimpleTestCSharpTemplateTypeFunc;
                prototype: SimpleTestCSharpTemplate;
                new (model: SimpleTestModel): SimpleTestCSharpTemplate;
                ctor: { new (model: SimpleTestModel): SimpleTestCSharpTemplate; };
            }
            const SimpleTestCSharpTemplate: SimpleTestCSharpTemplateTypeFunc;
        }
    }
}
